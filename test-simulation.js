const axios = require('axios');

const BASE_URL = 'http://localhost:3002/api/v1';

async function testSimulationFeatures() {
  console.log('üß™ Testing ScamSquatch Simulation & Preview Features\n');

  // Test data
  const testData = {
    routeId: 'test-route-1',
    userAddress: '0x742d35Cc6634C0532925a3b8D4C9db96C4b4d8b6',
    fromAmount: '1000000000000000000', // 1 ETH
    toAmount: '1000000', // 1 USDC
    slippage: 0.5
  };

  try {
    // 1. Test Transaction Simulation
    console.log('1Ô∏è‚É£ Testing Transaction Simulation...');
    const simulationResponse = await axios.post(`${BASE_URL}/simulate`, testData);
    
    if (simulationResponse.data.success) {
      console.log('‚úÖ Transaction simulation successful');
      const data = simulationResponse.data.data;
      
      console.log('\nüìä Simulation Results:');
      console.log(`   ‚Ä¢ Gas Used: ${data.simulation.gasUsed}`);
      console.log(`   ‚Ä¢ Gas Limit: ${data.simulation.gasLimit}`);
      console.log(`   ‚Ä¢ Gas Price: ${data.simulation.gasPrice}`);
      console.log(`   ‚Ä¢ Total Cost: ${data.simulation.totalCost}`);
      
      // 2. Test Approval Checking
      console.log('\n2Ô∏è‚É£ Testing Approval Checking...');
      const approval = data.approval;
      console.log(`   ‚Ä¢ Approval Required: ${approval.required}`);
      console.log(`   ‚Ä¢ Current Allowance: ${approval.currentAllowance}`);
      console.log(`   ‚Ä¢ Required Allowance: ${approval.requiredAllowance}`);
      console.log(`   ‚Ä¢ Approval Gas: ${approval.approvalGas}`);
      console.log(`   ‚Ä¢ Approval Cost: ${approval.approvalCost}`);
      
      // 3. Test Token Drain Detection
      console.log('\n3Ô∏è‚É£ Testing Token Drain Detection...');
      const security = data.security;
      console.log(`   ‚Ä¢ Token Drain Risk: ${security.tokenDrainRisk}`);
      console.log(`   ‚Ä¢ Suspicious Patterns: ${security.suspiciousPatterns.length}`);
      console.log(`   ‚Ä¢ Warnings: ${security.warnings.length}`);
      console.log(`   ‚Ä¢ Recommendations: ${security.recommendations.length}`);
      
      if (security.warnings.length > 0) {
        console.log('   ‚ö†Ô∏è  Warnings:');
        security.warnings.forEach(warning => console.log(`      ‚Ä¢ ${warning}`));
      }
      
      if (security.recommendations.length > 0) {
        console.log('   üí° Recommendations:');
        security.recommendations.forEach(rec => console.log(`      ‚Ä¢ ${rec}`));
      }
      
      // 4. Test Preview Data
      console.log('\n4Ô∏è‚É£ Testing Preview Data...');
      const preview = data.preview;
      console.log(`   ‚Ä¢ Input Amount: ${preview.inputAmount}`);
      console.log(`   ‚Ä¢ Output Amount: ${preview.outputAmount}`);
      console.log(`   ‚Ä¢ Price Impact: ${preview.priceImpact}%`);
      console.log(`   ‚Ä¢ Slippage: ${preview.slippage}%`);
      console.log(`   ‚Ä¢ Protocol Fee: ${preview.fees.protocol}`);
      console.log(`   ‚Ä¢ Gas Fee: ${preview.fees.gas}`);
      console.log(`   ‚Ä¢ Total Fee: ${preview.fees.total}`);
      
    } else {
      console.log('‚ùå Transaction simulation failed:', simulationResponse.data.error);
    }

    // 5. Test Improved Gas Estimation
    console.log('\n5Ô∏è‚É£ Testing Improved Gas Estimation...');
    const gasResponse = await axios.post(`${BASE_URL}/simulate/gas`, {
      routeId: testData.routeId,
      userAddress: testData.userAddress,
      fromAmount: testData.fromAmount
    });
    
    if (gasResponse.data.success) {
      console.log('‚úÖ Gas estimation successful');
      const gasData = gasResponse.data.data;
      console.log(`   ‚Ä¢ Gas Estimate: ${gasData.gasEstimate}`);
      console.log(`   ‚Ä¢ Gas Price: ${gasData.gasPrice}`);
      console.log(`   ‚Ä¢ Total Cost: ${gasData.totalCost}`);
    } else {
      console.log('‚ùå Gas estimation failed:', gasResponse.data.error);
    }

    // 6. Test with different scenarios
    console.log('\n6Ô∏è‚É£ Testing Different Scenarios...');
    
    // Test with high amount (potential high price impact)
    const highAmountData = {
      ...testData,
      fromAmount: '10000000000000000000', // 10 ETH
      routeId: 'test-route-high-impact'
    };
    
    const highImpactResponse = await axios.post(`${BASE_URL}/simulate`, highAmountData);
    if (highImpactResponse.data.success) {
      console.log('‚úÖ High amount simulation successful');
      const highImpactData = highImpactResponse.data.data;
      console.log(`   ‚Ä¢ Price Impact: ${highImpactData.preview.priceImpact}%`);
      console.log(`   ‚Ä¢ Security Risk: ${highImpactData.security.tokenDrainRisk ? 'HIGH' : 'LOW'}`);
    }

    console.log('\nüéâ All simulation features tested successfully!');
    console.log('\nüìã Summary of Features Implemented:');
    console.log('   ‚úÖ Transaction simulation preview');
    console.log('   ‚úÖ Approval checking and estimation');
    console.log('   ‚úÖ Token drain detection');
    console.log('   ‚úÖ Security risk analysis');
    console.log('   ‚úÖ Improved gas estimation');
    console.log('   ‚úÖ Fee breakdown and cost analysis');
    console.log('   ‚úÖ Suspicious pattern detection');
    console.log('   ‚úÖ User-friendly warnings and recommendations');

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data || error.message);
  }
}

// Run the test
testSimulationFeatures(); 